{"version":3,"file":"static/chunks/pages/market-14f09c59a95fcb59.js","mappings":"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","sources":["webpack://_N_E/../../libs/fanfanlo/src/react/createTypedContext.ts","webpack://_N_E/./src/components/page/market/data/market.context.tsx","webpack://_N_E/./src/components/page/market/data/ns.ts","webpack://_N_E/./src/components/page/market/data/market.data.intf.ts","webpack://_N_E/./src/components/page/market/components/scripts/Script.tsx","webpack://_N_E/./src/components/page/market/components/scripts/Scripts.tsx","webpack://_N_E/./src/components/page/market/MarketContent.tsx","webpack://_N_E/./src/pages/market/index.tsx","webpack://_N_E/../../libs/fanfanlo/src/react/AsyncContextLoader.tsx","webpack://_N_E/./src/components/navbar/NavBar.tsx","webpack://_N_E/./src/markets/market-html-utils.ts","webpack://_N_E/?080b","webpack://_N_E/../../libs/app/ui/src/components/tabbar/Tabbar.tsx"],"sourcesContent":["import { createContext, useContext } from \"react\";\n\nexport function createTypedContext<T>() {\n  const Context = createContext<T | undefined>(undefined);\n  const useTypedContext = () => {\n    const value = useContext(Context);\n    if (value === undefined) throw new Error(\"Context not provided\");\n    return value;\n  };\n  return [Context.Provider, useTypedContext] as const;\n}\n\n\n","import { createAsyncContextLoader } from \"@fanfanlo\";\r\nimport { createTypedContext } from \"@fanfanlo\";\r\nimport { IMarketPageData } from \"./market.data.intf\";\r\nimport { IStoreWithData } from \"@fanfanlo\";\r\n\r\nexport const [MarketPageDataContextProvider, useMarketPageData] = createTypedContext<IMarketPageData>();\r\n\r\nexport const MarketPageDataContextLoader = createAsyncContextLoader({\r\n    Provider: MarketPageDataContextProvider,\r\n    extract: (res: IStoreWithData<IMarketPageData>) => res.data,\r\n    fallback: <div>Loading...</div>,\r\n  });","const ns = 'market';\r\nconst androidData = `${ns}:android`;\r\nconst webData = `${ns}:web`;\r\nexport const marketNs = {\r\n    ns,\r\n    androidData,\r\n    webData,\r\n}","import { IStoreWithData, storeUtils } from \"@fanfanlo\";\r\nimport { marketNs } from \"./ns\";\r\nimport { IScriptData } from \"@market/lib\";\r\n\r\n// export interface IScriptData{\r\n//     ns:string;\r\n//     name:string;\r\n//     version:string;\r\n//     url?:string;\r\n//     content?:string;\r\n// }\r\n\r\nexport interface IScriptsInfo{\r\n    scripts:IScriptData[];\r\n    total:number;\r\n    loadIsEnded:boolean;\r\n    loadIsFailed:boolean;\r\n}\r\nexport interface IMarketPageData{\r\n    scriptsInfo:IScriptsInfo;\r\n}\r\n\r\nfunction createDefaultMarketPageData():IMarketPageData{\r\n    return {\r\n        scriptsInfo:{\r\n            scripts:[\r\n                {\r\n                    ns:\"@fanfanlo/scripts/emergency-alarm\",\r\n                    name:\"emergency-alarm\",\r\n                    version:\"1.0.0\",\r\n                    url:\"/scripts/fanfanlo/scripts/emergency-alarm/index.js\",\r\n                    content:\"\"\r\n                }\r\n            ],\r\n            total:0,\r\n            loadIsEnded:false,\r\n            loadIsFailed:false\r\n        }\r\n    }\r\n}\r\nexport function createMarketPageData():IMarketPageData{\r\n    return createDefaultMarketPageData();\r\n}\r\n\r\nlet loader:Promise<IStoreWithData<IMarketPageData>>;\r\nexport async function loadMarketPageData():Promise<IStoreWithData<IMarketPageData>>{\r\n    if(loader)return loader;\r\n    const defData = createDefaultMarketPageData();\r\n    loader = storeUtils.getNamespaceStoreWithData<IMarketPageData>(marketNs.androidData, {defData, forceReset:false, mergeDefData:true});\r\n    return loader;\r\n}","import { IScriptData } from \"@market/lib\"\r\nimport { Box } from \"@mui/material\"\r\nimport { marketHtmlUtils } from \"@src/markets/market-html-utils\"\r\nimport { IFrameReactContainer } from \"@fanfanlo\"\r\ninterface IScriptProps {\r\n    script: IScriptData\r\n}\r\n\r\n\r\nexport const Script = (props: IScriptProps) => {\r\n    return <Box>\r\n        <Box>{props.script.name}</Box>\r\n        <Box><span>\r\n            {props.script.summary}\r\n        </span></Box>\r\n        \r\n        <Box>\r\n            <IFrameReactContainer url={props.script.url} urlAsContent={true} htmlBuilder={marketHtmlUtils.createHtml} />\r\n        </Box>\r\n    </Box>\r\n}","import { Box } from \"@mui/material\";\r\nimport { useMarketPageData } from \"../../data/market.context\";\r\nimport { Script } from \"./Script\";\r\n\r\nexport const Scripts = () => {\r\n    const data = useMarketPageData()\r\n    return <Box>\r\n        {data.scriptsInfo.scripts.map((script)=>{\r\n            return <Script key={`${script.url}-${script.content}-${script.name}-${script.version}-${script.ns}`} script={script}/>\r\n        })}\r\n    </Box>\r\n}","import { Box } from \"@mui/material\";\r\nimport { Scripts } from \"./components/scripts/Scripts\";\r\n\r\nexport const MarketContent = () => {\r\n    return (\r\n        <Box>\r\n            <Scripts />\r\n        </Box>\r\n    )\r\n}","import { AppShell, TabbarContainer } from \"@app/ui\"\r\nimport { MarketPageDataContextLoader, MarketPageDataContextProvider } from \"@src/components/page/market/data/market.context\"\r\nimport { IMarketPageData, loadMarketPageData } from \"@src/components/page/market/data/market.data.intf\"\r\nimport { MarketContent } from \"@src/components/page/market/MarketContent\"\r\nimport { Suspense, use } from \"react\"\r\nimport { IStoreWithData } from \"@fanfanlo\"\r\nimport { NavBar } from \"@src/components/navbar/NavBar\"\r\n\r\n\r\n// function Content({loader}: {loader: Promise<IStoreWithData<IMarketPageData>>}){\r\n//     const store = use(loader);\r\n//     console.log('store=', store);\r\n//     return (<MarketPageDataContextProvider value={store.data}>\r\n//     <MarketContent />\r\n// </MarketPageDataContextProvider>\r\n//     )\r\n// }\r\n// export default function MarketPage() {\r\n//     const loader = loadMarketPageData();\r\n//     return (\r\n//             <AppShell>\r\n//                 <TabbarContainer titleConf={{ ns: \"homepage/pages/market/content\", key: \"market.title\" }}>\r\n//                 <Suspense fallback={<div>loading</div>}>\r\n//                     <Content loader={loader} />\r\n//                 </Suspense>\r\n//                 </TabbarContainer>\r\n//             </AppShell>\r\n//         )\r\n// }\r\n\r\n\r\nexport default function MarketPage() {\r\n    return (\r\n        <AppShell>\r\n            <TabbarContainer titleConf={{ ns: \"homepage/pages/market/content\", key: \"market.title\" }}\r\n                        navBar={<NavBar/>}>\r\n                <MarketPageDataContextLoader value={loadMarketPageData()}>\r\n                    <MarketContent />\r\n                </MarketPageDataContextLoader>\r\n            </TabbarContainer>\r\n        </AppShell>\r\n    )\r\n}","\n/**\n * 使用场景：\n * \nexport const [MarketPageDataContextProvider, useMarketPageData] = createTypedContext<IMarketPageData>();\n\n function Content({loader}: {loader: Promise<IStoreWithData<IMarketPageData>>}){\n    const store = use(loader);\n    console.log('store=', store);\n    return (<MarketPageDataContextProvider value={store.data}>\n    <MarketContent />\n</MarketPageDataContextProvider>\n    )\n}\n    export default function MarketPage() {\n    const loader:Promise<IStoreWithData<IMarketPageData>> = loadMarketPageData();\n    return (\n                <Suspense fallback={<div>loading</div>}>\n                    <Content loader={loader} />\n                </Suspense>\n        )\n}\n */\n// 使用场景：\n// C:\\work\\android-droid\\html\\website-2024-12\\libs\\fanfanlo\\src\\react\\createTypedContext.ts 的 createTypedContext返回的useTypedContext会需要是promise的，所以我需要一个能够给它传递promise并初始化的组件，可以使用react19的use方法来帮我实现吗？\n\nimport { Suspense, use } from \"react\";\n\n\nexport function createAsyncContextLoader<T, U>(options: {\n    Provider: React.ComponentType<{ value: T; children?: React.ReactNode }>;\n    extract: (u: U) => T;\n    fallback?: React.ReactNode;\n  }) {\n    const { Provider, extract, fallback = null } = options;\n  \n    function AsyncContextLoaderInner(props: {\n      value: () => Promise<U>;\n      children?: React.ReactNode;\n    }) {\n      const raw = use(props.value());\n      const contextValue = extract(raw);\n      return <Provider value={contextValue}>{props.children}</Provider>;\n    }\n  \n    return function AsyncContextLoader(props: {\n      value: () => Promise<U>;\n      children?: React.ReactNode;\n    }) {\n      return (\n        <Suspense fallback={fallback}>\n          <AsyncContextLoaderInner {...props} />\n        </Suspense>\n      );\n    };\n  }","import { useRouter } from \"next/router\";\r\nimport { useTranslation } from \"@fanfanlo\";\r\n\r\nimport HomeIcon from '@mui/icons-material/Home';\r\nimport SettingsIcon from '@mui/icons-material/Settings';\r\nimport CreateIcon from '@mui/icons-material/Create';\r\nimport { BottomNavigation, BottomNavigationAction } from \"@mui/material\";\r\ninterface TabInfoType {\r\n  label: string;\r\n  value: string;\r\n  icon: React.ReactNode;\r\n}\r\n\r\nexport function NavBar() {\r\n  const router = useRouter();\r\n  const { pathname } = router;\r\n  const { t } = useTranslation('homepage/components/navbar/content');\r\n  const tabInfoList: TabInfoType[] = [\r\n    { label: t('NavBar.home'), value: '/', icon: <HomeIcon /> },\r\n    { label: t('NavBar.create'), value: '/script-creator', icon: <CreateIcon /> },\r\n    // { label: t('content.market'), value: '/market', icon: <StorefrontIcon /> },\r\n    { label: t('NavBar.settings'), value: '/settings', icon: <SettingsIcon /> },\r\n  ];\r\n  return (\r\n\r\n    <BottomNavigation showLabels value={pathname}>\r\n      {tabInfoList.map(e => (\r\n        <BottomNavigationAction\r\n          key={e.value}\r\n          label={e.label}\r\n          icon={e.icon}\r\n          data-id={`tabbar-${e.value}`}\r\n          className={pathname === e.value ? 'Mui-selected' : ''}\r\n          onClick={() => {\r\n            if (pathname === e.value) return;\r\n            router.push(e.value);\r\n          }}\r\n        />\r\n      ))}\r\n    </BottomNavigation>\r\n  );\r\n}","import { IFrameHtmlBuilderOptions } from \"@fanfanlo\";\n\nfunction createHtml(script: string, opts?:IFrameHtmlBuilderOptions) {\n    return `<html>\n    <head>\n    <script type=\"importmap\">\n  {\n    \"imports\": {\n      \"react\": \"https://esm.sh/react@19\",\n      \"react-dom/client\": \"https://esm.sh/react-dom@19/client\"\n    }\n  }\n</script>\n        <script>\n                const IFRAME_ID = '${opts?.iframeId}';\n                window.IFRAME_ID = '${opts?.iframeId}';\n                \n            var autoWebViewJs = window.autoWebViewJs = window.parent.window.autoWebViewJs;\n            autoWebViewJs = window.parent.window.autoWebViewJs;\n            var callScript = window.callScript = autoWebViewJs.callScript;\n            var callScriptByConf = window.callScriptByConf = autoWebViewJs.callScriptByConf;\n            var isRealInAndroid = window.isRealInAndroid;\n            // var storeUtilsConf = window.storeUtilsConf = window.parent.window.storeUtilsConf;\n            var storeUtilsConf = window.storeUtilsConf = {\n                ns:{},\n                read:window.parent.window.storeUtilsConf.read,\n                write:window.parent.window.storeUtilsConf.write   \n            }\n        </script>\n        <title>droid lego</title>\n        <style>html, body{margin-left:-0px;padding:0;\n        background-color: white;}</style>\n    </head>\n    <body>\n        <div id=\"app\"></div>\n        <script>${script}</script>\n        <script>\n                // const IFRAME_ID = '${opts?.iframeId}';\n                function notifyResize() {\n                    const body = document.body;\n                    const html = document.documentElement;\n                    \n                    // 获取实际内容高度（取最大值）\n                    const height = Math.max(\n                        body.scrollHeight,\n                        body.offsetHeight,\n                        html.scrollHeight,\n                        html.offsetHeight\n                    );\n                    \n                    // 获取实际内容宽度\n                    const width = Math.max(\n                        body.scrollWidth,\n                        body.offsetWidth,\n                        html.scrollWidth,\n                        html.offsetWidth\n                    );\n                    \n                    // 发送消息给父窗口\n                    window.parent.postMessage({\n                        type: 'resize',\n                        iframeId: IFRAME_ID,\n                        height,\n                        width\n                    }, '*');\n                }\n                \n                // 监听窗口大小变化\n                window.addEventListener('resize', notifyResize);\n                \n                // 监听DOMContentLoaded，确保DOM加载完毕后调整大小\n                document.addEventListener('DOMContentLoaded', notifyResize);\n                \n                // 监听load事件，确保所有资源加载完毕后调整大小\n                window.addEventListener('load', notifyResize);\n                \n                // 创建MutationObserver监听DOM变化\n                const observer = new MutationObserver(notifyResize);\n                observer.observe(document.documentElement, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true,\n                    characterData: true\n                });\n                \n                // 监听来自父窗口的消息，处理请求重新调整大小的消息\n                window.addEventListener('message', function(event) {\n                    if (event.data && event.data.type === 'requestResize') {\n                        // 主动触发一次尺寸计算和发送\n                        notifyResize();\n                    }\n                });\n                \n                // 初始化大小\n                notifyResize();\n        </script>\n    </body>\n</html>`\n}\n\nfunction mergeHtml(html:string, opts?:IFrameHtmlBuilderOptions){\n    let h = html;\n    if(!h.includes('<body')){\n        h = `<body>${h}</body>`\n    }\n    if(!h.includes('<html')){\n        h = `<html>${h}</html>`\n    }\n    if(!h.includes('<head')){\n        h = h.replace('<html>', '<html><head></head>')\n    }\n    h = h.replace('<head>', `<head><script>\n                const IFRAME_ID = '${opts?.iframeId}';\n                window.IFRAME_ID = '${opts?.iframeId}';\n                \n            var autoWebViewJs = window.autoWebViewJs = window.parent.window.autoWebViewJs;\n            autoWebViewJs = window.parent.window.autoWebViewJs;\n            var callScript = window.callScript = autoWebViewJs.callScript;\n            var callScriptByConf = window.callScriptByConf = autoWebViewJs.callScriptByConf;\n            var isRealInAndroid = window.isRealInAndroid;\n            // var storeUtilsConf = window.storeUtilsConf = window.parent.window.storeUtilsConf;\n            var storeUtilsConf = window.storeUtilsConf = {\n                ns:{},\n                read:window.parent.window.storeUtilsConf.read,\n                write:window.parent.window.storeUtilsConf.write   \n            }\n        </script>\n        \n        <style>html, body{margin-left:-0px;padding:0;\n        background-color: white;}</style>`);\n\n    h = h.replace(`</body>`, `\n        \n        <script>\n                function notifyResize() {\n                    const body = document.body;\n                    const html = document.documentElement;\n                    \n                    // 获取实际内容高度（取最大值）\n                    const height = Math.max(\n                        body.scrollHeight,\n                        body.offsetHeight,\n                        html.scrollHeight,\n                        html.offsetHeight\n                    );\n                    \n                    // 获取实际内容宽度\n                    const width = Math.max(\n                        body.scrollWidth,\n                        body.offsetWidth,\n                        html.scrollWidth,\n                        html.offsetWidth\n                    );\n                    \n                    // 发送消息给父窗口\n                    window.parent.postMessage({\n                        type: 'resize',\n                        iframeId: IFRAME_ID,\n                        height,\n                        width\n                    }, '*');\n                }\n                \n                // 监听窗口大小变化\n                window.addEventListener('resize', notifyResize);\n                \n                // 监听DOMContentLoaded，确保DOM加载完毕后调整大小\n                document.addEventListener('DOMContentLoaded', notifyResize);\n                \n                // 监听load事件，确保所有资源加载完毕后调整大小\n                window.addEventListener('load', notifyResize);\n                \n                // 创建MutationObserver监听DOM变化\n                const observer = new MutationObserver(notifyResize);\n                observer.observe(document.documentElement, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true,\n                    characterData: true\n                });\n                \n                // 监听来自父窗口的消息，处理请求重新调整大小的消息\n                window.addEventListener('message', function(event) {\n                    if (event.data && event.data.type === 'requestResize') {\n                        // 主动触发一次尺寸计算和发送\n                        notifyResize();\n                    }\n                });\n                \n                // 初始化大小\n                notifyResize();\n        </script>\n        </body>`);\n        console.log('hhhhhhhhhhhhh=', h);\n    return h;\n}\nasync function createHtmlByUrl(url: string, opts?:IFrameHtmlBuilderOptions) {\n    const res = await fetch(url);\n    const content = await res.text();\n    return createHtml(content, opts);\n}\nexport const marketHtmlUtils = {\n    createHtml,\n    createHtmlByUrl,\n    mergeHtml\n}","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/market\",\n      function () {\n        return require(\"private-next-pages/market/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/market\"])\n      });\n    }\n  ","'use client';\r\nimport { Box, CssBaseline, Paper, Stack } from '@mui/material';\r\n\r\nimport React, { PropsWithChildren } from 'react';\r\nimport { ITitleI18nConf } from '../page';\r\nimport AndroidPageContent from '../page/AndroidPageContent';\r\n\r\nfunction BottomBar({navBar}:{navBar?:React.ReactNode}) {\r\n  return <Paper\r\n    id=\"bottom-navigation\"\r\n    sx={{ position: 'fixed', bottom: 0, left: 0, right: 0 }}\r\n    elevation={3}>\r\n    {navBar}\r\n  </Paper>;\r\n}\r\nexport function TabbarContainer({ children, titleConf, navBar }: {titleConf?:ITitleI18nConf, navBar:React.ReactNode} & PropsWithChildren)  {\r\n  return (\r\n    <Box sx={{ \r\n      minHeight: '100vh',\r\n      paddingBottom: '72px' // 为固定在底部的tabbar留出空间\r\n    }}>\r\n      <CssBaseline />\r\n      <AndroidPageContent titleConf={titleConf}>\r\n        {children}\r\n      </AndroidPageContent>\r\n      <BottomBar navBar={navBar} />\r\n    </Box>\r\n  );\r\n}\r\n\r\n"],"names":["createContext","useContext","createTypedContext","Context","undefined","useTypedContext","value","Error","Provider","createAsyncContextLoader","MarketPageDataContextProvider","useMarketPageData","MarketPageDataContextLoader","extract","res","data","fallback","div","ns","androidData","webData","marketNs","storeUtils","createDefaultMarketPageData","scriptsInfo","scripts","name","version","url","content","total","loadIsEnded","loadIsFailed","createMarketPageData","loader","loadMarketPageData","defData","getNamespaceStoreWithData","forceReset","mergeDefData","Box","marketHtmlUtils","IFrameReactContainer","Script","props","script","span","summary","urlAsContent","htmlBuilder","createHtml","Scripts","map","MarketContent","AppShell","TabbarContainer","NavBar","MarketPage","titleConf","key","navBar","Suspense","use","options","AsyncContextLoaderInner","raw","contextValue","children","AsyncContextLoader","useRouter","useTranslation","HomeIcon","SettingsIcon","CreateIcon","BottomNavigation","BottomNavigationAction","router","pathname","t","tabInfoList","label","icon","showLabels","e","data-id","className","onClick","push","opts","iframeId","mergeHtml","html","h","includes","replace","console","log","createHtmlByUrl","fetch","text","CssBaseline","Paper","React","AndroidPageContent","BottomBar","id","sx","position","bottom","left","right","elevation","minHeight","paddingBottom"],"sourceRoot":"","ignoreList":[]}